{"version":3,"sources":["components/Footer.js","components/Notification.js","components/Success.js","App.js","serviceWorker.js","index.js"],"names":["Footer","id","Notification","message","console","log","className","Success","success","api","App","useState","persons","setPersons","newName","setNewName","phoneNumber","setPhoneNumber","filterName","setFilterName","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","axios","get","then","response","data","filtered","filter","person","name","toLowerCase","includes","value","onChange","e","target","onSubmit","preventDefault","exists","some","trim","window","confirm","updateNumber","find","p","updateInfo","number","put","map","newPerson","length","post","concat","catch","setTimeout","type","key","onClick","delete","handleDelete","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.8fc94e13.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div id=\"footer\">\n      <br />\n      <em>Phonebook App, Copyright Â© 2020, Nirmal Patel</em>\n    </div>\n  );\n};\n\nexport default Footer;\n","// import React from \"react\";\n\n// const Notification = ({ message }) => {\n//   if (message === null) {\n//     return null;\n//   }\n\n//   return <div className=\"error\">{message}</div>;\n// };\n\n// export default Notification;\n\nimport React from \"react\";\n\nconst Notification = ({ message }) => {\n  if (message === null || message === \"\") {\n    console.log(\"check if this case is getting executed or not\");\n    return null;\n  }\n  console.log(\"culprit found\", message);\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React from \"react\";\nconst Success = ({ success }) => {\n  if (success === null || success === \"\") {\n    return null;\n  }\n\n  return <div className=\"success\">{success}</div>;\n};\n\nexport default Success;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Footer from \"./components/Footer\";\nimport Notification from \"./components/Notification\";\nimport Success from \"./components/Success\";\n\n// const api = \"http://localhost:3001/persons\";\nconst api = \"/api/persons\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [filterName, setFilterName] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  useEffect(() => {\n    axios.get(api).then((response) => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const exists = persons.some(\n      (person) =>\n        person.name.toLowerCase().trim() === newName.toLowerCase().trim()\n    );\n    if (newName && phoneNumber !== \"\") {\n      if (exists) {\n        let updateName = window.confirm(\n          `\"${newName}\" is already in the list, do you want to replace old number with new number?`\n        );\n\n        if (updateName === true) {\n          let updateNumber = persons.find((p) => p.name === newName);\n          const updateInfo = { ...updateNumber, number: phoneNumber };\n          axios\n            .put(`${api}/${updateNumber.id}`, updateInfo)\n            .then((response) => {\n              setPersons(\n                persons.map((p) =>\n                  p.number !== updateNumber.number ? p : response.data\n                )\n              );\n            });\n        }\n        setNewName(\"\");\n        setPhoneNumber(\"\");\n      } else {\n        const newPerson = {\n          name: newName,\n          number: phoneNumber,\n          id: persons.length + 1,\n        };\n        axios\n          .post(api, newPerson)\n          .then((response) => {\n            setPersons(persons.concat(response.data));\n            setNewName(\"\");\n            setPhoneNumber(\"\");\n          })\n          .catch((e) => console.log(e));\n\n        setSuccessMessage(`Added - \"${newPerson.name}\"`);\n        setTimeout(() => {\n          setSuccessMessage(null);\n        }, 3000);\n      }\n    } else {\n      setErrorMessage(\"Fields cannot be empty.\");\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 3000);\n    }\n  };\n\n  const handleInput = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handlePhone = (e) => {\n    setPhoneNumber(e.target.value);\n  };\n\n  const handleFilter = (e) => {\n    setFilterName(e.target.value.toLowerCase());\n  };\n\n  const filtered = persons.filter((person) => {\n    return person.name.toLowerCase().includes(filterName.toLowerCase());\n  });\n\n  const handleDelete = (person) => {\n    const confirm = window.confirm(`Delete \"${person.name}\" ?`);\n    if (confirm === true) {\n      axios\n        .delete(`http://localhost:3001/persons/${person.id}`)\n        .catch((e) =>\n          setErrorMessage(\n            `Information of \"${person.name}\" has already been removed from server.`\n          )\n        );\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n      const newPerson = persons.filter((p) => p.id !== person.id);\n      setPersons(newPerson);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n      <Success success={successMessage} />\n      Filter shown with name :-\n      <input value={filterName} onChange={handleFilter} />\n      <hr />\n      <h2>Add New Name</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          Name: <input value={newName} onChange={handleInput} />\n          <br />\n          <br />\n          Phone number: <input value={phoneNumber} onChange={handlePhone} />\n        </div>\n        <hr />\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      {filtered.map((person) => (\n        <div key={person.id}>\n          <p className=\"p-map\">\n            {person.name} - {person.number}\n          </p>\n          <button onClick={() => handleDelete(person)}>delete</button>\n        </div>\n      ))}\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}